// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                       @id @default(cuid(2))
  name                    String
  email                   String
  emailVerified           Boolean
  image                   String?
  role                    String?
  banned                  Boolean?
  banReason               String?
  banExpires              DateTime?
  stripeCustomerId        String?
  createdAt               DateTime                     @default(now())
  updatedAt               DateTime                     @updatedAt
  sessions                Session[]
  accounts                Account[]
  passkeys                Passkey[]
  notificationPreferences UserNotificationPreferences?

  @@unique([email])
  @@map("user")
}

model UserNotificationPreferences {
  id              String   @id @default(cuid(2))
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountUpdates  Boolean  @default(true)
  productUpdates  Boolean  @default(false)
  marketingEmails Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("user_notification_preferences")
}

model Subscription {
  id                   String    @id @default(cuid(2))
  plan                 String
  referenceId          String
  stripeCustomerId     String?
  stripeSubscriptionId String?
  status               String
  periodStart          DateTime?
  periodEnd            DateTime?
  cancelAtPeriodEnd    Boolean?
  seats                Int?
  trialStart           DateTime?
  trialEnd             DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@map("subscriptions")
}

model Session {
  id             String   @id @default(cuid(2))
  expiresAt      DateTime
  token          String
  ipAddress      String?
  userAgent      String?
  userId         String
  impersonatedBy String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid(2))
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id @default(cuid(2))
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

model Passkey {
  id           String   @id @default(cuid(2))
  name         String?
  publicKey    String
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  credentialID String
  counter      Int
  deviceType   String
  backedUp     Boolean
  transports   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("passkey")
}
